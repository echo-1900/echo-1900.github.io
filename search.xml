<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[overthewire攻略]]></title>
    <url>%2F2017%2F08%2F17%2Foverthewire%E6%94%BB%E7%95%A5%2F</url>
    <content type="text"><![CDATA[前言 对一个初学安全的人而言，难的往往不是缺乏耐心或毅力，而是完全找不到切入点，因而常常会在许多地方兜圈子而不是快速进步，为了解决这一问题，overthewire诞生了，该站以游戏的方式寓学于乐，帮助大家快速地掌握安全概念并介绍许多存在且常见的安全问题及其解决方案。但既是游戏便难免会卡壳，虽然游戏中也有提示，但为了避免遗忘及方便查阅，在这里还是先写一篇攻略。 话不多说，开撸！ Banditlevel 0直接ssh连接即可得(由于我是在windows下操作，因而选用了putty客户端) hostname:bandit.labs.overthewire.orgport: 2220user: bandit0password: bandit0(之后关卡除password为上一关所得flag外其余均同上，因而不予重复) level 0 -&gt; level 1用ls命令查看当前目录下文件后发现有名为readme的文件，执行cat readme即可得flagflag：boJ9jbbUNNfktd78OOpsqOltutMc3MY1(注意，putty下选中后可用CTRL+C复制，鼠标右击即为粘贴) level 1 -&gt; level 2用ls命令查看得有一名为-的文件，尝试用cat -打开，无果，因为系统会误认-为子命令下的命令符，因而需用cat ./-来查看。flag：CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9 level 2 -&gt; level 3用ls查看得又名为spaces in this filename的文件，因为文件名中有空格，因而如果直接执行cat spaces in this filename显然会因为该命令中的多处空格而报错，因此需将文件名中的空格用转义符\ + 空格表示。flag：UmHadQclWmgdLOKQ3YNgjWxGoRMb5luK level 3 -&gt; level 4ls后发现文件夹inherent，cd ./inhere进入其中，ls后无果，用ls -a查看所有文件(-a：显示所有档案及目录(ls内定将档案名或目录名称为“.”的视为影藏，不会列出))，发现.hidden，cat .hidden即可。flag：pIwrPrtPN36QITSp3EQaw936yaFoFgAB level 4 -&gt; level 5先用ls -la查看所有文件，发现都为“-”开头，再用file ./-*查看其类型，发现-file07，cat ./-file07。flag：koReBOKuIDDepwhWk7jZC0RTdopnAYKh level 5 -&gt; level 6find ./ -size 1033cflag:DXjZPULLxYr17uwoI01bNLQbtFemEgo7附：linux find命令用法 level 6 -&gt; level 7find ./ -user bandit7 -group bandit6 -size 33ccat ./var/lib/dpkg/info/bandit7.passwordflag: HKBPTKQnIay4Fw76bEy8PVxKEDQRKTzs level 7 -&gt; level 8cat data.txt | grep millionthflag：cvX2JJa4CFALtqS87jk27qwqGhBM9plV附：linux grep命令用法 level 8 -&gt; level 9cat data.txt | sort | uniq -uflag：UsvVyFSfZZWbi6wgC7dAFyFuR6jQQUhR附：linux sort命令用法附：linux uniq命令用法 level 9 -&gt; level 10 strings data.txt | grep &#39;=&#39;flag：truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk附：linux strings命令用法 level 10 -&gt; level 11base64 -d data.txtflag：IFukwKGsFW8MOq3IRFqrxE1hxTNEbUPR 格式：base64从标准输入中读取数据，按Ctrl+D结束输入。将输入的内容编码为base64字符串输出。 格式：echo “str” | base64将字符串str+换行 编码为base64字符串输出 格式：echo -n “str” | base64将字符串str编码为base64字符串输出。注意与上面的差别 格式：base64 file从指定的文件file中读取数据，编码为base64字符串输出 格式：base64 -d从标准输入中读取已经进行base64编码的内容，解码输出(加上-i参数，忽略非字母表字符，比如换行符) 格式：echo “str” | base64 -d将base64编码的字符串str+换行 解码输出 level 11 -&gt; level 12rot13在shell下实现： cat data.txt | tr a-zA-Z n-za-mN-ZA-Mflag：5Te8Y4drgCRfCx8ugdwuEX8KFC6k2EUu附：linux tr命令用法 level 12 -&gt; level 13 mkdir /tmp/1900cp ./data.txt /tmp/1900cd /tmp/1900xxd -r data.txt &gt; data1.txt # xxd命令详解(此处用于二进制与十六进制转换)zcat data1.txt &gt; data2 # zcat命令详解(此处用于解压.gz文件)bzip2 data2 # bzip2命令详解(此处用于解压.bz2文件)zcat data2.out &gt; data3tar -xvf data3 # tar命令详解(此处用于还原归档文件)…..一直重复解压并在每次解压后用file命令查看新文件的类型以进行下一次解压 flag：8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL level 13 -&gt; level 14ls查看文件得sshkey.private，于是用ssh -i sshkey.private bandit14@localhost 以bandit14用户的身份登陆上localhost，再cat /etc/bandit_pass/bandit14即可的password。flag：4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e附:ssh使用方法 level 14 -&gt; level 15执行telnet localhost 30000后输入当前关卡密码即可。flag：BfMYroe26WYalil77FoDi9qh59eK5xNr附:telnet使用方法 level 15 -&gt; level 16执行openssl s_client -ign_eof -connect localhost:30001后再输入此关密码即可flag：cluFn7wTiGryunymYOu4RcffSxQluehd level 16 -&gt; level 17此关需先用nmap扫描开放了端口，执行namp -p 31000-32000 localhost -v后发现此端口区间仅开放了五个，因此可以挨个尝试：openssl s_client -ign_eof -connect localhost:port即可得下一关的credential。 nmap手册在得到rsa密钥后先将其复制，再在“/tmp/”下创立文件夹并创建文件，再将密钥粘贴后保存并修改文件权限，最后用此文件即可登入下一关，命令如下： 123456mkdir /tmp/1900cd /tmp/1900touch sshkey.privatevi sshkey.privatechomd 600 sshkey.privatessh -i ./sshkey.private bandit17@localhost level 17 -&gt; level 18执行diff passwords.new passwords.old即可得到两文本中的不同行。flag：kfBf3eYk5BPBRzwjqutbbfE887SVc5Yd附：linux diff命令用法 level 18 -&gt; level 19直接连接后退出，因而选择用ssh bandit18@bandit.labs.overthewire.org cat readme 连接后输入上一关所得密钥即可登入。 具体解释可参考 《理解 bashrc 和 profile》。flag：IueksS7Ubh8G3DCwVzrTd8rAVOwq3M5x level 19 -&gt; level 201234./bandit20-do # 执行以查看操作说明./bandit20-do id # 根据说明再次执行，实际上该可执行文件是用setuid命令给当前用户授权./bandit20-do whoami # 查看setuid后身份./bandit20-do cat /etc/bendit_pass/bandit20 # 以bandit20身份查询密钥 flag:GbKksEFF4yrVs6il55v6gwY5aVje5f0j(具体参见Setuid命令使用及攻防详解) level 20 -&gt; level 21这关大致就是开两个终端然后都登入bendit20用户，然后一个用nc监听任意未占用端口充当服务端，另一个通过运行”suconnect”程序充当客户端来连接先前服务端，再在服务端贴上bandit20用户的密码，服务端将自行比对接收的字符串与bandit20用户的密码是否一致，若一致则显示下一关密码。附：nc用法具体参见netcat 中文手册 12345678910111213#服务端nc -nvlp 1900#客户端./suconnect 1900#服务端GbKksEFF4yrVs6il55v6gwY5aVje5f0j#服务端回显gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGrRead: GbKksEFF4yrVs6il55v6gwY5aVje5f0jPassword matches, sending next password flag：gE269g2h3mw3pwgrj0Ha9Uoqen1c9DGr level 21 -&gt; level 22根据提示进入”/etc/cron.d/“目录下查看该目录下的文件，发现有计划任务”cronjob_bandit22”, cat cronjob_bandit22 后返现该任务是一直在后台将”/usr/bin/cronjob_bandit22.sh” 的输出重定向到”/dev/null”， 执行cat /usr/bin/cronjob_bandit22.sh， 发现线索”cat /etc/bandit_pass/bandit22 &gt; /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv”， 于是cat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv 即可得答案。flag：Yk7owGAcWjwMVRwrTesJEwB7WVOiILLI附：关于crontab命令的介绍 crontab level 22 &gt; level 23通过查看”cronjob_bandit23”找到”/usr/bin/cronjob_bandit23.sh”，查看一下，发现是个简单的脚本，于是构造一个’$myname=bandit23’的符合脚本要求的字符串并求哈希，echo I am user bandit23 | md5sum | cut -d &#39; &#39; -f 1 ， 得到值 ‘8ca319486bfbbc3663ea0fbe81326349’，于是cat /tmp/8ca319486bfbbc3663ea0fbe81326349即可得flag。flag：jc1udXuA1tiHqjIsL8yaapX5XIAI6i0n附：linux cut 命令使用说明 level 23 -&gt; level 24通过类似上一关的方式查看到”cronjob_bandit24”脚本内容为： 123456789101112131415#!/bin/bashmyname=$(whoami)cd /var/spool/$mynameecho "Executing and deleting all scripts in /var/spool/$myname:"for i in * .*;do if [ "$i" != "." -a "$i" != ".." ]; then echo "Handling $i" timeout -s 9 60 ./$i rm -f ./$i fidone 该脚本会执行并删除所列文件夹中所有文件，因此我们可以写一个shell脚本来在文件删除之前将其复制到其他文件夹。 shell 脚本编写教程 类似之前的操作，我们在/tmp/下创建一个文件夹后在其中写脚本。 1234mkdir /tmp/1900cd /tmp/1900/touch script.shvi script.sh 再写入复制内容，我们不妨将其复制为/tmp/1900/下一个名为”flag.txt”的文本。 12#!/bin/bashls -la &gt;&gt; /tmp/1900/flag.txt 接着修改其权限，为方便起见直接777。 12chmod 777 /tmp/1900/script.shchmod -R 777 /tmp/1900 最后将脚本复制到之前脚本所指定的目录下。cp ./script.sh /var/spool/bandit24等待一到两分钟来待定时程序的下一次执行，然后即可查看”/tmp/1900/“下的flag.txt。在所得结果中有许多文件和文件夹，找可疑的查看，发现’pass’随即 123cd /var/spool/bandit/passls -la #发现存在文件passcat pass #得到flag [!!!!! 以上方法在文章最后一次更新前已失效][!!!!! 但是考虑到脚本是被以bandit24的身份执行，因而可直接查看flag并复制]于是更改”script.sh”脚本如下： 123#!/bin/bashflag=$(cat /etc/bandit_pass/bandit24)echo $flag &gt;&gt; /tmp/1900/flag.txt 其余不变。flag：UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ附： shell 脚本编写教程 level24 -&gt; level 25此关为暴力破解，因而需自己动手生成密码字典。不妨先建立连接看怎么操作：nc localhost 30002，进入后发现提示先输入本关密码再输入四位数字的pin且中间用空格作为分隔符，并且验证失败时返回 “Wrong!…..”。于是可依照此格式写字典。 123456789101112#先创建文件夹并在其中操作mkdir /tmp/1900cd /tmp/1900#再将本关密码，四位pin码分别写入不同文件后再组合printf "UoMYTrfrBFHyQXmg6gzctqAwOmw1IohZ\n%.0s" &#123;1..10000&#125; &gt; pass.txtseq -w 0 9999 &gt; pin.txtpaste -d ' ' pass.txt pin.txt &gt; dict.txt#最后连接端口并爆破,其中grep使用-v参数是为了反向查询，防止打印出过多错误答案而干扰正确答案的查找nc localhost 30002 &lt; dict.txt | grep -v "Wrong" flag：uNG9O58gUE7snukf3bvZ0rxhtnjzSGzG附：linux shell 下如何重复一个字符串附：linux seq命令的使用方法附：linux paste命令的使用方法]]></content>
      <tags>
        <tag>linux</tag>
        <tag>security concepts</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Next主题自定义色彩]]></title>
    <url>%2F2017%2F08%2F15%2FHexo-Next%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E8%89%B2%E5%BD%A9%2F</url>
    <content type="text"><![CDATA[前言 虽说Hexo Next也算得上是良心作品了，但是默认的主题配色很可能不合口味，而各部分色彩的值又是天南海北，为了提高修改效率，下面就分享一下主题配色的更改方法。 准备工作该主题颜色的表示方法采用十六进制编码，具体颜色的选取及查询其对应编码可在线进行,选取后可在配置文件“~\Hexo\themes\next\source\css_variables\base.styl”中进行添加或更改。 开始修改 header配色更改：切换到”~\Hexo\themes\next\source\css_schemes\Mist_header.styl”, 并修改”.header { background: xxxxx;}” (xxxxx为所更改颜色，下同) body配色更改：切换到”~\Hexo\themes\next\source\css_variables\base.styl”, 并修改”$body-bg-color = xxxxx“(在这行的周围还可修改body的字体颜色及边框颜色，此处忽略) sidebar配色更改：切换到”~\Hexo\themes\next\source\css_common\components\sidebar\sidebar.styl”, 并修改” background: xxxxx;” footer配色更改：切换到”~\Hexo\themes\next\source\css_schemes\Mist\index.styl”, 并修改 “.footer”下的background的值 大标题配色更改：切换到”~\Hexo\themes\next\source\css_variables\Mist.styl”, 并修改 “$brand color”的值]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F14%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
